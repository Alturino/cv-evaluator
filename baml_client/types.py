# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (8)
# #########################################################################

class CVExtractionResult(BaseModel):
    name: str
    address: str
    projects: typing.List["Project"]
    educations: typing.List["Education"]
    experience: typing.List["Experience"]
    skills: typing.List[str]

class Education(BaseModel):
    school: str
    gpa: float
    max_gpa: float

class Experience(BaseModel):
    company: str
    position: str
    location: str
    start_date: str
    end_date: str
    duration_in_year: float
    description: str
    responsibilities: typing.List[str]

class JobDescription(BaseModel):
    description: str
    qualifications: typing.List[str]
    tools: typing.List[str]
    real_work_examples: typing.List[str]

class OverallResult(BaseModel):
    cv_match_rate: float
    cv_feedback: str
    project_score: float
    project_feedback: str
    overall_summary: str
    technical_skills_match: "SkillResult"
    experience_level: "SkillResult"
    project_match: "SkillResult"
    relevant_achievements: "SkillResult"
    cultural_fit: "SkillResult"

class Project(BaseModel):
    name: str
    description: str
    technologies: typing.List[str]
    tools: typing.List[str]
    duration_in_year: float

class ProjectEvaluationResult(BaseModel):
    overall: float
    correctness: float
    code_quality: float
    resilience: float
    documentation: float
    creativity_and_bonus: float
    feedback: str

class SkillResult(BaseModel):
    score: int
    feedback: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
